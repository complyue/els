
{##
 # this is the entry module facing els starters
 #}

import ( Peer, **_ ) 'net/RT'
import * 'net/symbols'
effect import * 'net/effects'


# a Peer object should have been implanted automatically, the following
# line should have no technical effect but to hint an IDE for code
# completion etc.
peer ?= Peer()

console.info<| 'Serving els starter - ' ++ peer
defer {
  console.info<| 'Disconnecting els starter ' ++ peer
}


# define various effectful artifacts with `@netPeer` and `@dataSink` the
# minimum by convention
#
# note in assignments to symbolic attributes, semicolon before `@` is likely
# needed or the `@` may be parsed as an infix operator
effect {
  ; @netPeer = peer
  ; @dataSink = peer.armChannel( dataChan ?:= 'data' )
}


{

  while peer.eol() is false case peer.readCommand() of {@
    { cmdVal } -> {
      console.warn<| 'Unexpected command result from els starter: '
      ++ desc( cmdVal )
    }
    # note a command resulting in nil is expected and ignored here
  @}

} $=> { exc } -> {
  console.error<| 'Exception by els starter ' ++ peer
  ++ ' error: ' ++ desc( exc )
}
