{##
 # this is the service module of Edh Language Server, each instance facing a
 # starter process to serve its call-for-ls-attach rpc, namely `AttachToClient`.

 # the starter process is usually started by the lsc extension from within an
 # VSCode workspace session.
 #}


# mocking artifacts those should have been implanted by host
# module preparation, to give meaningful information to IDEs
# and/or other tools, for purpose of, e.g. auto completion.
if false then { # this block is impossible to run

  {##
   # receive a request/notif/reply in [JSON-RPC](http://www.jsonrpc.org)
   # form, from the language server client.
   #
   # a packet payload will be eval'ed within a sandboxed Edh env based off
   # this module's scope, as JSON format is syntactically valid in Edh, the
   # result will be an Edh dict, as LSP top level will always be a JSON object.
   #}
  method recvOnePkt() { pass }

  {##
   # check end-of-life of the client connection
   #}
  method eol() return false

}

defer {
  console.debug<| 'ELS server done with language server client.'
}

# TODO define artifacts in hosting the execution of incoming
#      commands


# loop forever until eol on error, or stopped elsewhere
while eol() is false {

  # note nil result from `sniff()` is silently ignored
  case recvOnePkt() of { rpcDict } -> {
    console.info<| 'ELS rpc:\n  ' ++ rpcDict
  }

} $=> { exc } -> {
  console.error<| 'ELS error: ' ++ desc( exc )
}
