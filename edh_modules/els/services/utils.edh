
import ( elsDebug, ** ) 'els/debug'


export data TxtDocFile ( absFilePath, version= 0 ) {

  method __match__ ( textDocument ) case textDocument[ 'uri' ] of {
    { URI( scheme, path ) } | scheme is 'file' -> {
      return TxtDocFile( path, textDocument[ 'version' ] or 0 )
    }
    debug and elsDebug.replHere()
    return void perform lspError( 'unsupported uri' )
  }

  method __json__() case this.absFilePath of {
    { '/' >@ _ } -> return {
      'uri': 'file://' ++ this.absFilePath,
    }
    error( 'path not absolute: ' ++ this.absFilePath )
  }

}

export data Position( line, character ) {

  method __match__( jsonRepr ) {
    case jsonRepr[ 'line' ] of { line } | line >= 0 ->
    case jsonRepr[ 'character' ] of { char } | char >= 0 ->
    Position( line, char )
  } $=> nil

  method __json__() {
    'line': this.line,
    'character': this.character,
  }

}

export data Range( start, end ) {

  method __match__( jsonRepr ) {
    case jsonRepr[ 'start' ] of { Position() as start } ->
    case jsonRepr[ 'end' ] of { Position() as end } ->
    Range( start, end )
  } $=> nil

  method __json__() {
    'start': json( this.start ),
    'end': json( this.end ),
  }

}

export data Location( uri, range ) {

  method __match__( jsonRepr ) {
    case jsonRepr[ 'uri' ] of { URI() as uri } ->
    case jsonRepr[ 'range' ] of { Range() as range } ->
    Location( uri, range )
  } $=> nil

  method __json__() {
    'uri': json( this.uri ),
    'range': json( this.range ),
  }

}
