
import * 'els/debug'

export method initialize(
  clientInfo= '<unknown>',
  capabilities= {},
  workspaceFolders= [],
  trace= 'off',
  ***_
) {

  console.debug<| 'Initializing els for client ' ++ clientInfo

  # uncomment to inspect the parameters and raw request data with a web REPL,
  # the launch link will be logged to stderr
  #
  # req = perform lspRequest
  # elsDebug.replHere()

  perform lspRespond( {
      'capabilities': {

        'textDocumentSync': {
          'openClose': true,
          'change': 1, # 0/1/2 None/Full/Incremental
          'save': { 'includeText': false, },
          'willSave': false,
          'willSaveWaitUntil': false,
        },

        'definitionProvider': true,
        'hoverProvider': true,

        'completionProvider': {
          'triggerCharacters': [
            ' ', '.',
          ]
        },

        'signatureHelpProvider': {
          'triggerCharacters': [
            '(',
          ],
          'retriggerCharacters': [
            ',',
          ],
        },

        # TODO impl. them
        # 'referencesProvider': true,
        # 'foldingRangeProvider': true,

        # 'documentSymbolProvider': true,
        # 'workspaceSymbolProvider': true,

        # todo impl. these ?
        # 'renameProvider': false,
        # 'selectionRangeProvider': false,
        # 'workspaceFolders': {
        #   'supported': false,
        #   'changeNotifications': false,
        # },

      },
      'serverInfo': {
        'name': 'els',
        'version': '0.1.0.pre',
      },
  } )

}

export method initialized(*** _ ) pass

export method shutdown(*** _ ) {
  perform lspRespond( None )
}

export exit = console.exit

# todo do really cancel those heavily demanding requests wip
export method @'$/cancelRequest'( id ) pass
