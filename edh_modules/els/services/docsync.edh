
import ( world, elsDebug, **_ ) 'els'

import * './utils'


export method @'textDocument/didOpen' ( textDocument, ***_ )
# try parse & resolve then publish the diagnostics asynchronously,
# to not block subsequent requests from the lsp client
case textDocument of { TxtDocWithFile ( absFilePath ) } -> { go {
    moduOpen = world.locateByFile( absFilePath )
    perform lspNotify( 'textDocument/publishDiagnostics',
      uri= textDocument[ 'uri' ],
      version= textDocument[ 'version' ],
      diagnostics= world.diags( moduOpen ),
    )
} }

export method @'textDocument/didClose' ( textDocument, ***_ )
pass # notification, don't mandate a response


export method @'textDocument/didChange' ( textDocument, contentChanges, ***_ ) {
  case contentChanges of {
    { chgContent :> moreChgs } | null( moreChgs ) -> { pass }
    # only Full change is supported by far
    error( 'too many changes' )
  }

  # try parse & resolve then publish the diagnostics asynchronously,
  # to not block subsequent requests from the lsp client
  case textDocument of { TxtDocWithFile ( absFilePath ) } -> { go {
      moduChgd = world.locateByFile( absFilePath )
      moduChgd.fill( chgContent )
      perform lspNotify( 'textDocument/publishDiagnostics',
        uri= textDocument[ 'uri' ],
        version= textDocument[ 'version' ],
        diagnostics= world.diags( moduChgd ),
      )
  } }
}


export method @'textDocument/didSave' ( textDocument, ***_ )
pass # notification, don't mandate a response
