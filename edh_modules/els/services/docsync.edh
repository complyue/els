
import ( world, elsDebug, **_ ) 'els'

import * './utils'


export method @'textDocument/didOpen' ( textDocument, ***_ ) void
# try parse & resolve then publish the diagnostics asynchronously,
# to not block subsequent requests from the lsp client
case textDocument of { TxtDocFile ( absFilePath ) } -> { go {
    moduOpen = world.locateByFile( absFilePath )
    perform lspNotify( 'textDocument/publishDiagnostics',
      uri= textDocument[ 'uri' ],
      version= textDocument[ 'version' ],
      diagnostics= world.diags( moduOpen ),
    )
} }

export method @'textDocument/didClose' ( textDocument, ***_ )
pass # notification, don't mandate a response


export method @'textDocument/didChange' (
  textDocument, contentChanges, ***_
) void {
  case contentChanges of {
    { chgContent :> moreChgs } | null( moreChgs )
    -> case chgContent[ 'text' ] of {
      { fullTxt } | type( fullTxt ) is StringType
      -> { pass }
      error( 'no text in the sole change' )
    }

    # only Full change is supported by far
    error( 'too many changes' )
  }

  case textDocument of { TxtDocFile ( absFilePath ) } -> {
    moduChgd = world.locateByFile( absFilePath )
    # `.fill()` returns immediately after the module invalidated and parsing
    # future of the new source registered, it'll post an event to
    # `moduChgd.chgSignal` as well
    moduChgd.fill( fullTxt )
    # then on a separate thread, block wait for the diags and publish it,
    # to unblock subsequent requests from the lsp client
    go {
      # terminate this thread on subsequent doc changes
      # it's safe as no lsp request involved so no response mandated
      perceive moduChgd.chgSignal break
      # block wait diags from resolution/parsing, report back to lsp client
      perform lspNotify( 'textDocument/publishDiagnostics',
        uri= textDocument[ 'uri' ],
        version= textDocument[ 'version' ],
        diagnostics= world.diags( moduChgd ),
      )
    }
  }
}


export method @'textDocument/didSave' ( textDocument, ***_ )
pass # notification, don't mandate a response
