
import ( world, elsDebug, ** ) 'els'

import * './utils'


data CompletionContext( triggerKind, triggerCharacter ) {

  Invoked = 1
  TriggerCharacter = 2
  TriggerForIncompleteCompletions = 3

  # this'll always match
  method __match__( jsonRepr ) return CompletionContext (
    jsonRepr[ 'triggerKind' ] or Invoked,
    jsonRepr[ 'triggerCharacter' ] or None,
  )

}


export method @'textDocument/completion' (
  textDocument, position, context= {}, ***
) void {
  case textDocument of { TxtDocFile( absFilePath ) } ->
  case position of { Position( line, character ) } ->
  case context of { CompletionContext( triggerKind, triggerCharacter ) } ->
  {
    modu = world.locateByFile( absFilePath )
    go { # not block subsequent requests from the lsp client
      perceive (perform lspReqSignal()) {
        { break } -> {
          perform lspError( 'cancelled', -32800 ) # RequestCancelled
          break
        }
        { sig } -> console.warn<| 'Unexpected request signal: ' ++ desc(sig)
      }

      # `suggest()` will mark the doc stablized immediately, perform a slight delay before that, in hope the lsc would cancel previous completion request after user has typed more chars quickly after the initial triggering
      for _ from console.everyMillis(120) do break
      resp = {
        world.suggest( modu, line, character )

        # case triggerKind of {
        #   CompletionContext.TriggerCharacter -> case triggerCharacter of {
        #     '.' -> world.suggest( modu, line, character )
        #     '@' -> world.suggest( modu, line, character )
        #     error( 'unexpected trigger char: ' ++ triggerCharacter )
        #   }

        #   CompletionContext.Invoked -> world.suggest( modu, line, character )

        #   CompletionContext.TriggerForIncompleteCompletions -> {
        #     # todo err out instead?
        #     world.suggest( modu, line, character )
        #   }

        #   error( 'unexpected trigger kind: ' ++ triggerKind )
        # }

      } or None
      perform lspRespond( resp )
    }
    return nil
  }
  error( 'unexpected lsp params' )
}
