{##
 # shared Edh language server
 #}

import * 'net'

import * 'els/RT'


export data ELS (
  # local addr & port to listen for call-for-languageserver-attachment
  c4aAddr = '127.0.0.1', c4aPort = 1707,
) {

  method __init__(*** _ ) {
    els = this; # alias self
    this.server = Server(
      'els/server', # the service module
      this.c4aAddr, this.c4aPort,
      init= modu => { # per-connection peer module initialization
        import * els into modu
      },
    )
    case this.server.addrs() of {
      { elsAddr :>_ } -> console.info<| 'Edh Language Server listening: '
      ++ elsAddr
      # or the network has failed, propagate the error
      this.server.join() # this usually throws
      # in case join() didn't throw, report this error
      error( 'ELS failed listening.' )
    }

  }


  method join() this.server.join()

  {##
   # meant to be call via rpc, by a starter process connected to this ls
   #}
  export method AttachToClient( port, addr= '127.0.0.1' ) {

  }

}
