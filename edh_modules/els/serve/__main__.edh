{##
 # this is the service module of Edh Language Server, each instance facing a
 # starter process to serve its call-for-ls-attach rpc, namely `AttachToClient`.

 # the starter process is usually started by the lsc extension from within an
 # VSCode workspace session.
 #}

{

  import * 'els'
  effect import * 'els/effects'

  # pull-in all service methods
  import (** allMethods ) 'els/services'

} $=> { exc } -> {
  console.fatal<| 'els service initalization error: ' ++ desc( exc )
}

# mocking artifacts those should have been implanted by host
# module preparation, to give meaningful information to IDEs
# and/or other tools, for purpose of, e.g. auto completion.
if false then { # this block is impossible to run

  {##
   # network identifier of the language server client
   #}
  clientId ?= '<??>'

  {##
   # post a request/notif/reply in [JSON-RPC](http://www.jsonrpc.org) form,
   # to the language server client.
   #
   # rpcOut should be the payload stringified from an Edh dict compliant to LSP.
   #}
  method postOnePkt( rpcOut, **headers ) pass

  {##
   # receive a request/notif/reply in [JSON-RPC](http://www.jsonrpc.org) form,
   # from the language server client.
   #
   # a packet payload will be eval'ed within a sandboxed Edh env based off
   # this module's scope, as JSON format is syntactically valid in Edh, the
   # result will be an Edh dict, as LSP top level will always be a JSON object.
   #}
  method recvOnePkt() pass

  {##
   # check end-of-life of the client connection
   #}
  method eol() return false

}

console.debug<| 'ELS client ' ++ clientId ++ ' connected.'
defer {
  console.debug<| 'ELS done with client ' ++ clientId
}

{

  {##
   # for a service method to post a lsp notification
   #}
  effect method lspNotify( notifMthName, *arrayParams, **objectParams ) {
    objectParams and arrayParams and ( console.warn<|
      'positional args ignored with keyword args present' )
    outDict = {
      'method': notifMthName,
      'params': objectParams or arrayParams or nil, # note nil deletes the entry
    }
    postOnePkt( json$ outDict )
  }

  {##
   # for a service method to post a lsp response
   #}
  effect method lspRespond( result, **headers ) {
    reqDict = behave lspRequest
    case reqDict[ 'id' ] of {
      { idReq } | type( idReq ) ?<= ( DecimalType, StringType, ) -> { pass }
      debug and elsDebug.replHere()
      error( 'bug: trying to respond to non-request' )
    }
    outDict = {
      'id': idReq,
      'result': result,
    }
    postOnePkt( json$ outDict, **headers )
  }

  effect method lspError( message, code= -32001, **headers ) {
    reqDict = behave lspRequest
    case reqDict[ 'id' ] of {
      { idReq } | type( idReq ) ?<= ( DecimalType, StringType, ) -> { pass }
      debug and elsDebug.replHere()
      error( 'bug: trying to report error to non-request' )
    }
    outDict = {
      'id': idReq,
      'error': {
        'code': code,
        'message': str( message ),
      },
    }
    postOnePkt( json$ outDict, **headers )
  }

  # global sink of all responses, service threads can choose to perceive this
  globalResponses = sink
  effect lspResponses = globalResponses

  # response listeners can be registered per request id
  responseListeners = {}
  effect method lspReceiveResponse( idReq, listener ) {
    responseListeners[ idReq ] = listener
  }

} $=> { exc } -> {
  console.error<| 'Failed preparing els service environment: ' ++ desc( exc )
  rethrow
}

# loop forever until eol on error, or stopped elsewhere
while eol() is false {

  case recvOnePkt() of { rpcIn } -> {@
    # note this scoped block retains effectful context for the lsp request,
    # e.g. lspRequest

    case rpcIn[ 'jsonrpc' ] of {
      '2.0' -> { pass }
      _ -> error( 'unexpected lsp JSONRPC version', rpc=rpcIn )
    }

    # in case of error response
    case rpcIn[ 'error' ] of { rpcErr } -> {
      case rpcIn[ 'id' ] of {
        nil -> error( 'lsp error response without id' )
        { idReq } -> {
          globalResponses <- rpcIn
          case responseListeners[ idReq ] of {
            { listener } -> { {
                # a listener must return `true` to be kept installed
                if listener( NA, error=rpcErr ) is not true
                then responseListeners[ idReq ] = nil
              } $=> { exc } -> {
                console.warn<| 'LSP response listener failed: ' ++ desc( exc )
                # uninstall the failing one
                ai if responseListeners[ idReq ] is listener
                then responseListeners[ idReq ] = nil
            } }
            # console.warn<| (
            #   'LSP error not listened: ' ++ rpcErr, rpc=rpcIn
            # )
          }
        }
      }
      continue # done with this error response
    }

    # in case of success response
    case rpcIn[ 'result' ] of { rpcResult } -> {@
      case rpcIn[ 'id' ] of {
        nil -> error( 'lsp response without id' )
        { idReq } -> {
          globalResponses <- rpcIn
          case responseListeners[ idReq ] of {
            { listener } -> { {
                # a listener must return `true` to be kept installed
                if listener( rpcResult ) is not true
                then responseListeners[ idReq ] = nil
              } $=> { exc } -> {
                console.warn<| 'LSP response listener failed: ' ++ desc( exc )
                # uninstall the failing one
                ai if responseListeners[ idReq ] is listener
                then responseListeners[ idReq ] = nil
            } }
            # console.warn<| (
            #   'LSP result not listened: ' ++ rpcResult, rpc=rpcIn
            # )
          }
        }
      }
      continue # done with this response
    @}

    # in case of request or notification
    case rpcIn[ 'method' ] of {
      { mthName } | mthName and type( mthName ) is StringType -> { pass }
      _ -> error( 'unexpected lsp JSONRPC method', rpc=rpcIn )
    }
    # treat carefully about the procedure parameters
    case rpcIn[ 'params' ] of {
      # note Edh null is a procedure instead of a constant
      null -> args = ()
      # normal case
      { args } | type( args ) is DictType -> { pass }
      # fallback case
      args = ()
    }

    case allMethods ?@ mthName of {
      nil -> {
        case mthName of { '$/' >@ _ } -> # protocol implementation dependent
        case rpcIn[ 'id' ] of nil -> # it's a notification
        { continue } # ignore this per
        # https://github.com/microsoft/vscode-languageserver-node/issues/170

        debug and elsDebug.replHere()
        postOnePkt( json$ {
            'id': rpcIn[ 'id' ],
            'error': {
              'code': -32601, # MethodNotFound
              'message': 'no such method: ' ++ mthName,
            },
        } )
        continue
      }
      { mth } -> if type( mth ) ?<= [
        MethodType, HostMethodType,
      ] then pass
      else error( 'bug: bad service method type ' ++ type( mth ), rpc=rpcIn )
    }

    # effectful value of original request
    effect lspRequest = rpcIn

    {
      # try call the designated lsp method
      mth(** args )
    } $=> { exc } -> {
      console.debug<| desc( exc )
      # report back for an uncaught exception as internal error
      postOnePkt( json$ {
          'id': rpcIn[ 'id' ],
          'error': {
            'code': -32603, # InternalError
            'message': str( exc ),
          },
      } )
    }
  @}

} $=> { exc } -> {
  if eol() is false then {
    # todo post some notification of internal error? what id to use?
  }
  console.error<| 'Exception by els client ' ++ clientId
  ++ ' error: ' ++ desc( exc )
}
