{##
 # this is the entry module of Đ (Edh) Language Server
 #}

import ( LangServer, sendTextToFd, **_ ) 'els/RT'

# this'll trigger the instantiation of the globally shared world at analysis
# time (by importing 'els/world' there),  as well as the globally shared web
# REPL (by 'els/debug').
import * '.'


# it's customizable with a nested `els/config.edh`,
# in `edh_modules` resides in cwd or any upper directory
import (** cfg ) 'els/config'

# start listening
els = LangServer(** cfg )

# wait the result, either sucess or failure
case els.addrs() of {
  { elsAddr :>_ } -> console.info
  <| 'Đ (Edh) Language Server listening: ' ++ elsAddr
  # or the network has failed, propagate the error
  els.join() # this usually throws
  # in case join() didn't throw, report this error
  error( 'Đ (Edh) Language Server failed listening.' )
}

# success, assuming launched by lsc extension, try report actual port to fd 3
{
  bytesWritten = sendTextToFd( 3, str( elsAddr.port() ) )
  console.debug<| 'Reported els port ' ++ elsAddr.port() ++ ' to fd 3 ('
  ++ bytesWritten ++ ' bytes)'
} $=> { exc } -> {
  console.warn<| 'Failed reporting els port ' ++ elsAddr.port() ++ ' to fd 3'
}

# keep the server process running

if debug then {
  import * 'els/debug'

  # show session count and url list every 5 minutes
  for _ from console.everySeconds( 300 )
  do elsDebug.logSessions()

} else {
  els.join()
}
