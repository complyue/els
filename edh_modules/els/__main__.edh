{##
 # this is the entry module of Đ (Edh) Language Server
 #}

import ( LangServer, sendTextToFd, ** ) 'els/RT'

# this'll trigger the instantiation of the globally shared world at analysis
# time (by importing 'els/world' there),  as well as the globally shared web
# REPL (by 'els/debug').
import * '.'
effect import * './effects'


namespace service () {

  {## Event sinks per lsc request, majorly used for cancellation by lsc
   # Keyed by lsc request id #}
  clientRequests = {}

  method @'$/cancelRequest'( id as idReq ) {
    ai case this.clientRequests[ idReq ] of { cancelSignal } -> {
      cancelSignal <- { break }
      this.clientRequests[ idReq ] = nil
    }
  }

  {## Event sink for all responses from lsc wrt lss requests
   #}
  globalResponses = sink

  {## Registered listeners for responses from lsc wrt lss requests
   # Keyed by lss request id #}
  responseListeners = {}

  # pull-in all service methods
  import * 'els/services'

}


# it's customizable with a nested `els/config.edh`,
# in `edh_modules` resides in cwd or any upper directory
import (** cfg ) 'els/config'

# start listening
let els = LangServer( **cfg ) $@ () => {

  # Seems VSCode can make fast concurrent connections at startup, here per a subsequent connection, the import above can finish before those modules finished initialization.
  # Wait here and only proceed after the artifacts have actually gotten imported, or we'll be wrong to report MethodNotFound back to VSCode
  for _ from console.everyMillis(200, wait1st= false,)
  do if service ? initialize is not nil then break


  {##
   # network identifier of the language server client
   #}
  clientId = perform clientId
  clientId =: '<??>'

  {##
   # post a request/notif/reply in [JSON-RPC](http://www.jsonrpc.org) form,
   # to the language server client.
   #
   # rpcOut should be the payload stringified from an Edh dict compliant to LSP.
   #}
  postOnePkt = perform postOnePkt
  postOnePkt =: (rpcOut, **headers) => pass

  {##
   # receive a request/notif/reply in [JSON-RPC](http://www.jsonrpc.org) form,
   # from the language server client.
   #
   # a packet payload will be eval'ed within a sandboxed Edh env based off
   # this module's scope, as JSON format is syntactically valid in Edh, the
   # result will be an Edh dict, as LSP top level will always be a JSON object.
   #}
  recvOnePkt = perform recvOnePkt
  recvOnePkt =: () => pass

  {##
   # check end-of-life of the client connection
   #}
  eol = perform eol
  eol =: () => false


  console.debug<| 'ELS client ' ++ clientId ++ ' connected.'
  defer {
    console.debug<| 'ELS done with client ' ++ clientId
  }

  {

    {##
     # for a service method to post a lsp notification
     #}
    effect method lspNotify( notifMthName, *arrayParams, **objectParams ) {
      objectParams and arrayParams and ( console.warn<|
        'positional args ignored with keyword args present' )
      outDict = {
        'method': notifMthName,
        'params': objectParams or arrayParams or nil, # note nil deletes the entry
      }
      postOnePkt( json$ outDict )
    }

    effect method lspReqSignal() {
      reqDict = behave lspRequest
      case reqDict[ 'id' ] of {
        { idReq } | type( idReq ) is in ( "Decimal", "String", ) -> { pass }
        debug and elsDebug.replHere()
        error( 'bug: obtaining request signal of non-request' )
      }
      return ai case service.clientRequests[ idReq ] of {
        { reqSig } -> reqSig # already armed
        # need to arm a signal sink
        # assuming current thread is the owner, cleanup on thread termination
        defer service.clientRequests[ idReq ] = nil
        # arm an event sink by request id
        service.clientRequests[ idReq ] = sink
      }
    }

    {##
     # for a service method to post a lsp response
     #}
    effect method lspRespond( result, **headers ) {
      reqDict = behave lspRequest
      case reqDict[ 'id' ] of {
        { idReq } | type( idReq ) is in ( "Decimal", "String", ) -> { pass }
        debug and elsDebug.replHere()
        error( 'bug: trying to respond to non-request' )
      }
      outDict = {
        'id': idReq,
        'result': result,
      }
      postOnePkt( json$ outDict, **headers )
    }

    effect method lspError( message, code= -32001, **headers ) {
      reqDict = behave lspRequest
      case reqDict[ 'id' ] of {
        { idReq } | type( idReq ) is in ( "Decimal", "String", ) -> { pass }
        debug and elsDebug.replHere()
        error( 'bug: trying to report error to non-request' )
      }
      outDict = {
        'id': idReq,
        'error': {
          'code': code,
          'message': str( message ),
        },
      }
      postOnePkt( json$ outDict, **headers )
    }

    # global sink of all responses, service threads can choose to perceive this
    effect lspResponses = service.globalResponses

    # response listeners can be registered per request id
    effect method lspReceiveResponse( idReq, listener ) {
      service.responseListeners[ idReq ] = listener
    }

  } $=> { exc } -> {
    console.error<| 'Failed preparing els service environment: ' ++ desc( exc )
    rethrow
  }


  # loop forever until eol on error, or stopped elsewhere
  while eol() is false {

    case recvOnePkt() of { rpcIn } -> {@
      # note this scoped block retains effectful context for the lsp request,
      # e.g. lspRequest

      case rpcIn[ 'jsonrpc' ] of {
        '2.0' -> { pass }
        _ -> error( 'unexpected lsp JSONRPC version', rpc=rpcIn )
      }

      # in case of error response
      case rpcIn[ 'error' ] of { rpcErr } -> {
        case rpcIn[ 'id' ] of {
          nil -> error( 'lsp error response without id' )
          { idReq } -> {
            service.globalResponses <- rpcIn
            case service.responseListeners[ idReq ] of {
              { listener } -> { {
                  # a listener must return `true` to be kept installed
                  if listener( NA, error=rpcErr ) is not true
                  then service.responseListeners[ idReq ] = nil
                } $=> { exc } -> {
                  console.warn<| 'LSP response listener failed: ' ++ desc( exc )
                  # uninstall the failing one
                  ai if service.responseListeners[ idReq ] is listener
                  then service.responseListeners[ idReq ] = nil
              } }
              # console.warn<| (
              #   'LSP error not listened: ' ++ rpcErr, rpc=rpcIn
              # )
            }
          }
        }
        continue # done with this error response
      }

      # in case of success response
      case rpcIn[ 'result' ] of { rpcResult } -> {@
        case rpcIn[ 'id' ] of {
          nil -> error( 'lsp response without id' )
          { idReq } -> {
            service.globalResponses <- rpcIn
            case service.responseListeners[ idReq ] of {
              { listener } -> { {
                  # a listener must return `true` to be kept installed
                  if listener( rpcResult ) is not true
                  then service.responseListeners[ idReq ] = nil
                } $=> { exc } -> {
                  console.warn<| 'LSP response listener failed: ' ++ desc( exc )
                  # uninstall the failing one
                  ai if service.responseListeners[ idReq ] is listener
                  then service.responseListeners[ idReq ] = nil
              } }
              # console.warn<| (
              #   'LSP result not listened: ' ++ rpcResult, rpc=rpcIn
              # )
            }
          }
        }
        continue # done with this response
      @}

      # in case of request or notification
      case rpcIn[ 'method' ] of {
        { mthName } | mthName and type( mthName ) is "String" -> { pass }
        _ -> error( 'unexpected lsp JSONRPC method', rpc=rpcIn )
      }
      # treat carefully about the procedure parameters
      case rpcIn[ 'params' ] of {
        # note Edh null is a procedure instead of a constant
        null -> args = ()
        # normal case
        { args } | type( args ) is "Dict" -> { pass }
        # fallback case
        args = ()
      }

      case service ?@ mthName of {
        nil -> {
          case mthName of { '$/' >@ _ } -> # protocol implementation dependent
          case rpcIn[ 'id' ] of nil -> # it's a notification
          { continue } # ignore this per
          # https://github.com/microsoft/vscode-languageserver-node/issues/170

          console.warn<| 'Missing service method ' ++ mthName
          debug and elsDebug.replHere()
          postOnePkt( json$ {
              'id': rpcIn[ 'id' ],
              'error': {
                'code': -32601, # MethodNotFound
                'message': 'no such method: ' ++ mthName,
              },
          } )
          continue
        }
        { mth } -> if type( mth ) is in (
          "Method", "HostMethod",
        ) then pass
        else error( 'bug: bad service method type ' ++ type( mth ), rpc=rpcIn )
      }

      # effectful value of original request
      effect lspRequest = rpcIn

      {
        # try call the designated lsp method
        mth(** args )
      } $=> { exc } -> {
        console.error<| desc( exc )
        # report back for an uncaught exception as internal error
        postOnePkt( json$ {
            'id': rpcIn[ 'id' ],
            'error': {
              'code': -32603, # InternalError
              'message': str( exc ),
            },
        } )
      }
    @}

  } $=> { exc } -> {
    if eol() is false then {
      # todo post some notification of internal error? what id to use?
    }
    console.error<| 'Exception by els client ' ++ clientId
    ++ ' error: ' ++ desc( exc )
  }

}


# wait the result, either sucess or failure
case els.addrs() of {
  { elsAddr :>_ } -> console.info
  <| 'Đ (Edh) Language Server listening: ' ++ elsAddr
  # or the network has failed, propagate the error
  els.join() # this usually throws
  # in case join() didn't throw, report this error
  error( 'Đ (Edh) Language Server failed listening.' )
}

# success, assuming launched by lsc extension, try report actual port to fd 3
{
  bytesWritten = sendTextToFd( 3, str( elsAddr.port() ) )
  console.debug<| 'Reported els port ' ++ elsAddr.port() ++ ' to fd 3 ('
  ++ bytesWritten ++ ' bytes)'
} $=> { exc } -> {
  console.warn<| 'Failed reporting els port ' ++ elsAddr.port() ++ ' to fd 3'
}

# keep the server process running

if debug then {
  import * 'els/debug'

  # show session count and url list every 5 minutes
  for _ from console.everySeconds( 300 )
  do elsDebug.logSessions()

} else {
  els.join()
}
