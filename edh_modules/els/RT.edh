{##
 # shared Đ (Edh) language server
 #
 # LSP up to 3.16, assumes that one server serves one tool. No support in the
 # protocol to share one server between different tools.
 # Such a sharing would require additional protocol e.g. to lock a document to
 # support concurrent editing.
 #
 # ELS as implemented here assumes server sharing be possible, especially when
 # debugging the els server functionality, an els process would be started from
 # the command line before an els client embedded in a VSCode instance is
 # started.
 #}

# This is the sentinel file stand in place of a host module that
# should have been installed by the host interpreter, which contains
# host procedures, classes and other artifacts defined via EHI,
# and obviously, written in the host language (i.e. Haskell)
#
# Execution of this module file is a sign showing that wrong Edh
# interpreter is used to run the program.
error( 'Missing host module: ' ++ __name__ )

export {

  {##
   # write the specified txt to the specified fd, then close the fd
   #}
  method sendTextToFd( fd, txt ) pass

  {##
   # an Edh module at analyze time
   #}
  class MetaModule {

    {##
     # Obtain LSP response for the symbols in this module
     #
     # As well as for traditional symbols, also for doc-commented blocks to be
     # shown in the outline view of side bar, as *navigable* table-of-contents
     # reflecting the hierarchical structure of the code/document organization.
     #}
    method moduSymbols() pass

    {##
     # Obtain LSP response for the folding ranges in this module
     #
     # Closely tracking the ToC shown in the outline view (from symbols),
     # making each level individually foldable in the code editor.
     #}
    method foldingRanges() pass

    {##
     # Invalidate the module resolution, also the parsing result if
     # `srcChanged` is true
     #}
    method invalidate( srcChanged= false ) pass

    {##
     # Fill new versioned source for this module on-the-fly.
     #
     # This method returns the previous version on-the-fly, or nil if this is
     # the first otf fill since last parsed.
     #}
    method fill( verOTF, srcOTF ) pass

    {##
     # Check whether on-the-fly source changing of this module has been
     # stabilized
     #}
    method stabilized() pass

    {##
     # EPM home this moduel belongs to
     #}
    property$ method home() pass

    {##
     # Absolute path of the module's source file
     #}
    property$ method doc() pass

  }

  {##
   # an Edh world at analyze time
   #}
  class MetaWorld {

    locate :: ( StringType ) -> MetaModule
    {##
     # locate the meta module by import specification
     #}
    method locate( moduSpec ) pass

    locateByFile :: ( StringType ) -> MetaModule
    {##
     # locate the meta module by absolute path
     #}
    method locateByFile( absFilePath ) pass

    diags :: ( MetaModule ) -> json![ json!DictType ]
    {##
     # obtain diagnostics generated during parsing and resolution of the module
     #
     # can be blocked waiting the result of a resolution in progress, which in
     # turn can be blocked waiting the result of a parsing in progress
     #}
    method diags( modu ) pass

    defi :: ( MetaModule, line!int!DecimalType, char!int!DecimalType )
    -> json!DictType
    {##
     # obtain symbol definition at the specified location
     #}
    method defi( modu, line, char ) pass

    hover :: ( MetaModule, line!int!DecimalType, char!int!DecimalType )
    -> json!DictType
    {##
     # obtain symbol documentation at the specified location
     #}
    method hover( modu, line, char ) pass

    suggest :: ( MetaModule, line!int!DecimalType, char!int!DecimalType )
    -> json!DictType
    {##
     # obtain suggestions (autocompletion) at the specified location
     #}
    method suggest( modu, line, char ) pass

  }

  {##
   # the networked language server
   #}
  class LangServer {

    method __init__(
      port= 1707, port'max= port, addr= '127.0.0.1',
      modu= 'els/serve', init= None,
    ) pass

    method addrs() pass
    method eol() pass
    method join() pass
    method stop() pass

  }

}
