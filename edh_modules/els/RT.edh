{##
 # shared Đ (Edh) language server
 #
 # LSP up to 3.16, assumes that one server serves one tool. No support in the
 # protocol to share one server between different tools.
 # Such a sharing would require additional protocol e.g. to lock a document to
 # support concurrent editing.
 #
 # ELS as implemented here assumes server sharing be possible, especially when
 # debugging the els server functionality, an els process would be started from
 # the command line before an els client embedded in a VSCode instance is
 # started.
 #}

# This is the sentinel file stand in place of a host module that
# should have been installed by the host interpreter, which contains
# host procedures, classes and other artifacts defined via EHI,
# and obviously, written in the host language (i.e. Haskell)
#
# Execution of this module file is a sign showing that wrong Edh
# interpreter is used to run the program.
error( 'Missing host module: ' ++ __name__ )

export {

  {##
   # write the specified txt to the specified fd, then close the fd
   #}
  method sendTextToFd( fd, txt ) pass

  class MetaModule {

    method invalidate() pass

    method fill( src ) pass

    property$ method home() pass

    property$ method doc() pass

  }

  class MetaWorld {

    locate :: ( StringType ) -> MetaModule
    method locate( moduSpec ) pass

    locateByFile :: ( StringType ) -> MetaModule
    method locateByFile( absFilePath ) pass

    diags :: ( MetaModule ) -> json![ json!DictType ]
    method diags( modu ) pass

    defi :: ( MetaModule, line!int!DecimalType, char!int!DecimalType )
    -> json!DictType
    method defi( modu, line, char ) pass

    hover :: ( MetaModule, line!int!DecimalType, char!int!DecimalType )
    -> json!DictType
    method hover( modu, line, char ) pass

    dotNota :: ( MetaModule, line!int!DecimalType, char!int!DecimalType )
    -> json!DictType
    method dotNota( modu, line, char ) pass

  }

  class LangServer {

    method addrs() pass
    method eol() pass
    method join() pass
    method stop() pass

  }

}
