{##
 # A module showcases how useful the outline hierarchy of an Đ module can be
 #}

{## Doc-Comment
 # What's Doc-Comment?
 #
 # In Đ, it is just block-comment started with `{##`.
 #
 # Doc-Comment can be written preceding any statement in Đ,
 # as well as in the very beginning of a module.
 #
 # Clarification:
 #  It can be written anywhere technically, but only significates when
 #  associated with some certain kind of syntatical elements.
 #
 #} {
  ;
  # Without a semicolon here, it is an empty dict literal instead of a
  # block, then the doc-comment before it will be ignored, like a vanilla
  # block-comment. Try remove it and see how this section disappears from
  # the outline view in the side bar.
}

{## Documentation in Code
 # Harder to forget to update doc, on code changes
 #
 # Similar to e.g. `/** ... */` denoted Javadoc in Java source, Doc-Comment
 # can be used to document classes, methods etc. right near the actual code.
 #
 #} {

  {##
   # A class models sth.
   #}
  class SomeClass {

    {##
     # A method does sth.
     #}
    method someMethod() pass

    {##
     # A method does other things
     #}
    method anotherMethod() pass

  }

}


{## Extra Purpose in Đ
 # Source Code being Documentation as well
 #} {

  {##
   # Outline with Nested Block Organization
   # Auto, Clickable ToC, with contents properly indented
   #
   # Assuming you are viewing this file with VSCode, Eclipse Theia or derived
   # tools like Codium or Gitpod, look at the outline view in the side bar now,
   # you can see that doc-comment can be associated with a block standalone,
   # like the following one. Then the 1st line serves as the title, the 2nd
   # line as the detail, and rest lines of the doc-comment not showing up in
   # the outline view.
   #
   # Pay attention to the nesting hierarchy in the outline view, each level
   # can be collapsed and expanded individually, as well as some convenient
   # UX tools there, e.g. the "Follow Cursor" toggle.
   #
   # The outline view serves much like the *clickable* ToC of an Đ module,
   # esp. when you view the module source as documentation of itself.
   #
   # Further with code folding by the editor, the source code can be browsed
   # just like documentation.
   #
   # And you can write dedicated Đ modules solely for documentation purpose,
   # once familar with code navigation capability of the IDE, import the
   # documented modules and place references to the documented artifacts,
   # then the viewer, in the same way as you the author, can navigate to the
   # actual implementation code by just "Go to Definition". Note navigating
   # back is as easy too, and you should find yourself the keyboard shortcuts
   # for your setup for great good.
   #
   # Note
   #  A vanilla block doesn't create lexical scope in Đ, rather like in
   #  JavaScript (or in Python if you sense some *blocks* there), than in
   #  many C family languages. So you don't worry to put more nested blocks
   #  soly for documentation purpose. And indentation is enfored by Đ code
   #  formatter, be aware of that, and I think it's better than Markdown's
   #  level nesting yet without identation in accordance.
   #
   # Extra Note
   #  Đ has *scoped block* which is denoted as `{@ ... @}`, it does create a
   #  nested scope. And you can write doc-comment for it too.
   #
   #} {
    # Right-click `console` below, select "Go to Definition", see what happens.
    # Try `print` then.
    console.print
    # Hover mouse on them to see sth.

    # Note
    #  In Đ, a block is an expression instead of a statement, but also,
    #  a standalone expression is an expression-statement, so a standalone
    #  block-expression can be said to be a block-statement.
  }

  # Lines between symbol regions are considered implementation details,
  # they are not navigable as having no corresponding clickable label in the
  # outline view (ToC), then such regions should be foldable, so a reader can
  # purposefully hide them for less distraction.
  assert$ 1+1 is 2
  assert$ 3 > 2

  {## Code Lens for Life
   # Snippets to run in integrated terminal sessions, a click away
   #
   # Further with Code Lens, an Đ code cell can be executed in an integrated
   # Đ terminal session within the IDE, by just a single mouse click.
   #
   # You should see clickable labels such as `Run Cell | Run Above | Run Below`
   # above each code cell, as in below. Click them (repeating welcomed) and
   # see what happens.
   #
   # Those terminal sessions are full fledged REPL by the way, feel free to
   # keyin Đ source by yourself there. Tip: for multi-line input, start by a
   # line with mere `{`, and finish by a line with mere `}`.
   #
   # Find files named `haskit.json` within the workspace folder(s),
   # if you ever wonder where the list of choices come from.
   #
   # Finally, it becomes live code as well as live documentation!
   #
   #} {

    # %{ this denotes the starting cell of a block
    console.print$ 'Finally!'

    # %% this denotes another cell
    console.print( 'Live Code,' ++ ' Live Documentation!' )

    # %% this denotes yet another cell
    let ( do's, don'ts, ) = (
      ( 'feel it', 'experience it',
        'keep things up-to-date', ),
      ( "merely read it", 'literally remember it',
        'leave yourself outdated', ),
    )
    for ( todo, to'not'do ) from zip( do's, don'ts )
    do console.print$ 'Do ' ++ todo ++ ", don't " ++ to'not'do ++ '!'

    # %} this denotes the final cell of a block
    console.print$ `Voila!`
    # %# an end-of-cell mark

    # Note
    #  use `# %#` as above, to denote end of a cell/block, when the following
    #  contents are toxic to its syntax validity.
  }

}
